// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package authStore

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, email, name, profile_pic, updated_at, created_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
`

type CreateUserParams struct {
	UserID     string `json:"user_id"`
	Email      string `json:"email"`
	Name       string `json:"name"`
	ProfilePic string `json:"profile_pic"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.UserID,
		arg.Email,
		arg.Name,
		arg.ProfilePic,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, name, email, profile_pic, updated_at, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.ProfilePic,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, name, email, profile_pic, updated_at, created_at FROM users WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.ProfilePic,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
