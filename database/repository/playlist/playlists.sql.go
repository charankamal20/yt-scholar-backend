// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: playlists.sql

package playlistStore

import (
	"context"

	"github.com/sqlc-dev/pqtype"
)

const addNewPlaylist = `-- name: AddNewPlaylist :exec
INSERT INTO playlist (
    playlist_id, user_id, title, url, thumbnail_url, channel, videos, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, now()
)
`

type AddNewPlaylistParams struct {
	PlaylistID   string                `json:"playlist_id"`
	UserID       string                `json:"user_id"`
	Title        string                `json:"title"`
	Url          string                `json:"url"`
	ThumbnailUrl string                `json:"thumbnail_url"`
	Channel      string                `json:"channel"`
	Videos       pqtype.NullRawMessage `json:"videos"`
}

func (q *Queries) AddNewPlaylist(ctx context.Context, arg AddNewPlaylistParams) error {
	_, err := q.db.ExecContext(ctx, addNewPlaylist,
		arg.PlaylistID,
		arg.UserID,
		arg.Title,
		arg.Url,
		arg.ThumbnailUrl,
		arg.Channel,
		arg.Videos,
	)
	return err
}

const deletePlaylistForUser = `-- name: DeletePlaylistForUser :exec
delete from playlist where playlist_id = $1 and user_id = $2
`

type DeletePlaylistForUserParams struct {
	PlaylistID string `json:"playlist_id"`
	UserID     string `json:"user_id"`
}

func (q *Queries) DeletePlaylistForUser(ctx context.Context, arg DeletePlaylistForUserParams) error {
	_, err := q.db.ExecContext(ctx, deletePlaylistForUser, arg.PlaylistID, arg.UserID)
	return err
}

const getAllUserPlaylists = `-- name: GetAllUserPlaylists :many
SELECT playlist_id, user_id, title, url, thumbnail_url, channel, videos, updated_at, created_at FROM playlist WHERE user_id = $1
`

func (q *Queries) GetAllUserPlaylists(ctx context.Context, userID string) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPlaylists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.PlaylistID,
			&i.UserID,
			&i.Title,
			&i.Url,
			&i.ThumbnailUrl,
			&i.Channel,
			&i.Videos,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaylistById = `-- name: GetPlaylistById :one
SELECT playlist_id, user_id, title, url, thumbnail_url, channel, videos, updated_at, created_at FROM playlist WHERE playlist_id = $1
`

func (q *Queries) GetPlaylistById(ctx context.Context, playlistID string) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistById, playlistID)
	var i Playlist
	err := row.Scan(
		&i.PlaylistID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.ThumbnailUrl,
		&i.Channel,
		&i.Videos,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPlaylistForUser = `-- name: GetPlaylistForUser :one
SELECT playlist_id, user_id, title, url, thumbnail_url, channel, videos, updated_at, created_at FROM playlist WHERE playlist_id = $1 and user_id = $2
`

type GetPlaylistForUserParams struct {
	PlaylistID string `json:"playlist_id"`
	UserID     string `json:"user_id"`
}

func (q *Queries) GetPlaylistForUser(ctx context.Context, arg GetPlaylistForUserParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, getPlaylistForUser, arg.PlaylistID, arg.UserID)
	var i Playlist
	err := row.Scan(
		&i.PlaylistID,
		&i.UserID,
		&i.Title,
		&i.Url,
		&i.ThumbnailUrl,
		&i.Channel,
		&i.Videos,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePlaylistForUser = `-- name: UpdatePlaylistForUser :exec
UPDATE playlist
SET
    title = $2,
    url = $3,
    thumbnail_url = $4,
    channel = $5,
    videos = $6,
    updated_at = now()
WHERE playlist_id = $1 and user_id = $7
`

type UpdatePlaylistForUserParams struct {
	PlaylistID   string                `json:"playlist_id"`
	Title        string                `json:"title"`
	Url          string                `json:"url"`
	ThumbnailUrl string                `json:"thumbnail_url"`
	Channel      string                `json:"channel"`
	Videos       pqtype.NullRawMessage `json:"videos"`
	UserID       string                `json:"user_id"`
}

func (q *Queries) UpdatePlaylistForUser(ctx context.Context, arg UpdatePlaylistForUserParams) error {
	_, err := q.db.ExecContext(ctx, updatePlaylistForUser,
		arg.PlaylistID,
		arg.Title,
		arg.Url,
		arg.ThumbnailUrl,
		arg.Channel,
		arg.Videos,
		arg.UserID,
	)
	return err
}
